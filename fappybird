#include <stdio.h>
#include <stdint.h>
#include <naomi/video.h>
#include <naomi/timer.h>
#include <naomi/maple.h>  // For JVS buttons
#include <math.h>
#include <string.h>
#include <stdlib.h>

#define BUTTON_UP (1 << 0)  // Flap button (Player 1)
#define BUTTON_START (1 << 1)  // Start button (Player 1)
#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 480
#define PIPE_WIDTH 50
#define PIPE_GAP 120
#define PIPE_VELOCITY 2.0f
#define GRAVITY 0.5f
#define FLAP_VELOCITY -7.0f

typedef struct {
    float x, y, width, height, velocity;
} bird_t;

typedef struct {
    float x, y, height;
} pipe_t;

bird_t bird = {100, SCREEN_HEIGHT / 2, 16, 16, 0};  // Bird object
pipe_t pipes[4];  // 4 pipes (2 pairs, one above and one below)

unsigned int score = 0;  // Player score

typedef enum {
    GAME_STATE_WAITING,  // Waiting for the player to press start
    GAME_STATE_RUNNING,  // Game is running
    GAME_STATE_OVER      // Game over state
} game_state_t;

game_state_t game_state = GAME_STATE_WAITING;  // Start in waiting state

// Function prototypes
void draw_bird(void);
void update_bird(void);
void draw_pipes(void);
void update_pipes(void);
void check_collisions(void);
void draw_scoreboard(void);
void draw_pixel(int x, int y, color_t color);  // Pixel drawing function
void draw_start_screen(void);  // Draw the "Press Start" screen
void draw_game_over_screen(void);  // Draw the "Game Over" screen
void reset_game(void);  // Reset the game variables
void game_over(void);  // Handle game over logic

// Function to set a pixel on the screen at (x, y) with a specific color
void draw_pixel(int x, int y, color_t color) {
    if (x >= 0 && x < video_width() && y >= 0 && y < video_height()) {
        video_draw_pixel(x, y, color);  // Use video_draw_pixel
    }
}

// Function to draw the "Press Start" screen
void draw_start_screen(void) {
    video_draw_debug_text(320 - 40, 240 - 10, rgb(255, 255, 255), "Press Start");
}

// Function to draw the game-over screen
void draw_game_over_screen(void) {
    video_draw_debug_text(320 - 60, 240 - 10, rgb(255, 0, 0), "Game Over!");
    video_draw_debug_text(320 - 80, 240 + 10, rgb(255, 255, 255), "Press Start to Restart");
}

// Function to initialize pipes' positions and heights
void init_pipes() {
    for (int i = 0; i < 4; i++) {
        pipes[i].height = rand() % (SCREEN_HEIGHT - PIPE_GAP);  // Random pipe height
        pipes[i].x = SCREEN_WIDTH + i * (SCREEN_WIDTH / 2);  // Space pipes apart
        pipes[i].y = (i % 2 == 0) ? 0 : pipes[i].height + PIPE_GAP;  // Alternate between top and bottom pipes
    }
}

// Function to reset the game state
void reset_game() {
    bird.x = 100;
    bird.y = SCREEN_HEIGHT / 2;
    bird.velocity = 0;
    score = 0;
    game_state = GAME_STATE_WAITING;
    init_pipes();  // Reinitialize pipes with random positions
}

// Main function
void main() {
    // Initialize video with 1555 color format
    video_init(VIDEO_COLOR_1555);

    // Set background color
    video_set_background_color(rgb(48, 48, 48));  // Dark gray

    // Initialize pipes
    init_pipes();

    unsigned int counter = 0;
    double fps_value = 0.0;

    while (1) {
        // Start the FPS and draw time profiling
        int fps = profile_start();

        // Poll buttons to get the current state
        if (maple_poll_buttons() == 0) {  // Poll buttons
            jvs_buttons_t buttons = maple_buttons_held();  // Get held buttons

            if (game_state == GAME_STATE_WAITING) {
                // Check if the Start button is pressed
                if (buttons.player1.start) {
                    game_state = GAME_STATE_RUNNING;  // Start the game
                    score = 0;  // Reset score
                    bird.y = SCREEN_HEIGHT / 2;  // Reset bird position
                    bird.velocity = 0;  // Reset bird velocity
                    init_pipes();  // Reinitialize pipes
                } else {
                    draw_start_screen();  // Display "Press Start" screen
                }
            }

            if (game_state == GAME_STATE_RUNNING) {
                // Update bird based on UP button press (flap)
                if (buttons.player1.up) {
                    bird.velocity = FLAP_VELOCITY;  // Make the bird flap upwards
                }

                update_bird();
                update_pipes();
                check_collisions();
            }

            if (game_state == GAME_STATE_OVER) {
                // Check if the Start button is pressed after game over to restart
                if (buttons.player1.start) {
                    reset_game();  // Reset the game state
                } else {
                    draw_game_over_screen();  // Display game over screen
                }
            }
        }

        // Clear screen before drawing (similar to video_fill_screen in the example)
        if (game_state == GAME_STATE_RUNNING) {
            video_fill_screen(rgb(48, 48, 48));  // Set background color (gray)

            // Draw pipes, bird, and scoreboard
            draw_pipes();
            draw_bird();
            draw_scoreboard();
        } else if (game_state == GAME_STATE_OVER) {
            draw_game_over_screen();
        }

        // Debug text (as seen in the example)
        video_draw_debug_text(20, 180, rgb(255, 255, 255), "Flappy Bird!");
        video_draw_debug_text(20, 200, rgb(200, 200, 20), "Aliveness counter: %d", counter++);
        video_draw_debug_text(20, 220, rgb(200, 200, 20), "FPS: %.01f, %dx%d", fps_value, video_width(), video_height());

        // Sync the frame to VBlank (as in the example)
        video_display_on_vblank();

        // Calculate FPS based on profiling
        uint32_t uspf = profile_end(fps);
        fps_value = 1000000.0 / (double)uspf;
    }
}

// Function to draw the bird (represented as a small rectangle)
void draw_bird(void) {
    int x_end = bird.x + bird.width;
    int y_end = bird.y + bird.height;

    // Use a single loop to draw all pixels of the bird
    for (int x = bird.x; x < x_end; x++) {
        for (int y = bird.y; y < y_end; y++) {
            draw_pixel(x, y, rgb(255, 255, 0));  // Yellow bird
        }
    }
}

// Function to update the bird's position based on input (flap or gravity)
void update_bird(void) {
    bird.velocity += GRAVITY;
    bird.y += bird.velocity;

    // Prevent bird from going below the screen
    if (bird.y + bird.height >= SCREEN_HEIGHT) {
        bird.y = SCREEN_HEIGHT - bird.height;
        bird.velocity = 0;  // Stop falling
    }

    // Prevent bird from going above the screen
    if (bird.y < 0) {
        bird.y = 0;
        bird.velocity = 0;  // Stop going upwards
    }
}

// Function to draw the pipes (top and bottom pairs)
void draw_pipes() {
    for (int i = 0; i < 4; i++) {
        // Draw the top pipe
        if (i % 2 == 0) {  // Top pipes
            for (int y = 0; y < pipes[i].height; y++) {
                for (int x = pipes[i].x; x < pipes[i].x + PIPE_WIDTH; x++) {
                    draw_pixel(x, y, rgb(0, 255, 0));  // Green pipe
                }
            }
        }
        // Draw the bottom pipe
        else {  // Bottom pipes
            for (int y = pipes[i].y; y < SCREEN_HEIGHT; y++) {
                for (int x = pipes[i].x; x < pipes[i].x + PIPE_WIDTH; x++) {
                    draw_pixel(x, y, rgb(0, 255, 0));  // Green pipe
                }
            }
        }
    }
}

// Function to update the pipes' positions
void update_pipes() {
    for (int i = 0; i < 4; i++) {
        pipes[i].x -= PIPE_VELOCITY;  // Move pipes to the left

        // Reset pipes to the right once they move off-screen
        if (pipes[i].x + PIPE_WIDTH < 0) {
            pipes[i].x = SCREEN_WIDTH;
            pipes[i].height = rand() % (SCREEN_HEIGHT - PIPE_GAP);  // Random new pipe height
            pipes[i].y = (i % 2 == 0) ? 0 : pipes[i].height + PIPE_GAP;  // Alternate between top and bottom pipes
        }
    }
}

// Function to check for collisions (bird with pipes or ground)
void check_collisions() {
    for (int i = 0; i < 4; i++) {
        // Check if bird collides with pipes
        if (bird.x + bird.width > pipes[i].x && bird.x < pipes[i].x + PIPE_WIDTH) {
            if ((i % 2 == 0 && bird.y < pipes[i].height) || (i % 2 == 1 && bird.y + bird.height > pipes[i].y)) {
                game_over();
                return;  // Exit early to avoid further checks after game over
            }
        }
    }

    // Check if bird hits the ground
    if (bird.y + bird.height >= SCREEN_HEIGHT) {
        game_over();
    }
}

// Function to display the scoreboard (score)
void draw_scoreboard() {
    char score_text[64];
    snprintf(score_text, sizeof(score_text), "Score: %d", score);
    video_draw_debug_text(320 - (strlen(score_text) * 4), 20, rgb(255, 255, 255), score_text);
}

// Function for game over (stop the game or restart)
void game_over() {
    game_state = GAME_STATE_OVER;
}
